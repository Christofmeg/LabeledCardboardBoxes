import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

archivesBaseName = "${mod_id}-forge-${supported_versions}"

minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', mod_id, '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file("${project(':Common').projectDir}/src/main/resources/") ,
                    '--existing', file('src/test/resources/')
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")

    // CATALOGUE
    if (project.hasProperty('forge_catalogue_version')) {
        implementation fg.deobf("curse.maven:catalogue-459701:${forge_catalogue_version}")
    }

    // CONFIGURED
    if (project.hasProperty('forge_configured_version')) {
        implementation fg.deobf("curse.maven:configured-457570:${forge_configured_version}")
    }

    implementation fg.deobf("curse.maven:mekanism-268560:4644795")

    implementation fg.deobf("curse.maven:jade-324717:4800904")
    implementation fg.deobf("curse.maven:the-one-probe-245211:3965693")
    implementation fg.deobf("curse.maven:wthit-forge-455982:5285380")
    implementation fg.deobf("curse.maven:badpackets-615134:4784364")

}

processResources {
    from project(":Common").sourceSets.main.resources
    exclude '.cache'
}

jar.finalizedBy('reobfJar')

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            file: 'META-INF/mods.toml',
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            version: version,
            mod_authors: mod_authors,
            mod_description: mod_description,
            mekanism_version_range: mekanism_version_range,
            jade_version_range: jade_version_range,
            pack_format_number: pack_format_number
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    apiToken = file('../../API Tokens/mekanismcardboardtooltip.md')
    def projectId = "${cf_id}".toString()
    def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file('changelog.md')
    mainFile.addGameVersion('Client', 'Server')
    mainFile.releaseType = "${release_type}"
    "${forge_release_versions}".split(',').each {
        mainFile.addGameVersion("${it}")
    }
    mainFile.addRequirement("mekanism")
    mainFile.addOptional("jade")
    mainFile.addOptional("the-one-probe")
    mainFile.addOptional("wthit-forge")
    mainFile.addOptional("catalogue")
    mainFile.addModLoader('Forge')
}

modrinth {
    token = file('../../API Tokens/modrinth.md').text
    projectId = "${modrinth_id}"
    versionName = getArchivesBaseName() + "-" + getVersion()
    versionType = "${release_type}"
    changelog = file('changelog.md').text
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
    gameVersions = "${forge_release_versions}".split(",") as List<String>
    dependencies {
        required.project "mekanism"
        optional.project "jade"
        optional.project "the-one-probe"
        optional.project "wthit"
    }
    loaders = "forge".split(",") as List<String>
}